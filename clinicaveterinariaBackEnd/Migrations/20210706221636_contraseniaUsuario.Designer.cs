// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using clinicaveterinariaBackEnd.Helps;

namespace clinicaveterinariaBackEnd.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210706221636_contraseniaUsuario")]
    partial class contraseniaUsuario
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.7");

            modelBuilder.Entity("clinicaveterinariaBackEnd.Entities.Anamnesi", b =>
                {
                    b.Property<int>("IdAnamnesis")
                        .HasColumnType("int(11)")
                        .HasColumnName("idAnamnesis");

                    b.Property<string>("FichaClinica")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<int?>("Horas")
                        .HasColumnType("int(2)")
                        .HasColumnName("horas");

                    b.Property<string>("Liquido")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("liquido");

                    b.Property<string>("Solido")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("solido");

                    b.Property<string>("Tratamiento")
                        .HasColumnType("text")
                        .HasColumnName("tratamiento");

                    b.HasKey("IdAnamnesis")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "FichaClinica" }, "fk_Anamnesis_FichaClinica1_idx");

                    b.ToTable("anamnesis");
                });

            modelBuilder.Entity("clinicaveterinariaBackEnd.Entities.Cliente", b =>
                {
                    b.Property<string>("IdCliente")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("idCliente");

                    b.Property<string>("ApellidoCliente")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("apellidoCliente");

                    b.Property<string>("CedulaCliente")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("cedulaCliente");

                    b.Property<string>("DireccionCliente")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("direccionCliente");

                    b.Property<string>("EmailCliente")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("emailCliente");

                    b.Property<string>("EmpresaCliente")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("NombreCliente")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nombreCliente");

                    b.HasKey("IdCliente")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CedulaCliente" }, "cedulaCliente_UNIQUE")
                        .IsUnique();

                    b.HasIndex(new[] { "EmpresaCliente" }, "fk_Cliente_Empresa1_idx");

                    b.ToTable("cliente");
                });

            modelBuilder.Entity("clinicaveterinariaBackEnd.Entities.Empresa", b =>
                {
                    b.Property<string>("IdEmpresa")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("idEmpresa");

                    b.Property<string>("DireccionEmpresa")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("direccionEmpresa");

                    b.Property<string>("EmpresaMedia")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("NombreEmpresa")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nombreEmpresa");

                    b.Property<string>("RucEmpresa")
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)")
                        .HasColumnName("rucEmpresa");

                    b.Property<string>("TelefonoEmpresa")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("telefonoEmpresa");

                    b.HasKey("IdEmpresa")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "EmpresaMedia" }, "fk_Empresa_Media1_idx");

                    b.ToTable("empresa");
                });

            modelBuilder.Entity("clinicaveterinariaBackEnd.Entities.Examenlaboratorio", b =>
                {
                    b.Property<int>("IdLaboratorio")
                        .HasColumnType("int(11)")
                        .HasColumnName("idLaboratorio");

                    b.Property<string>("Deshidratacion")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Ecg")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ECG");

                    b.Property<string>("Ecografia")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Hemograma")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Radiologia")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("IdLaboratorio")
                        .HasName("PRIMARY");

                    b.ToTable("examenlaboratorio");
                });

            modelBuilder.Entity("clinicaveterinariaBackEnd.Entities.Fichaclinica", b =>
                {
                    b.Property<string>("IdFichaClinica")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("idFichaClinica");

                    b.Property<string>("Cliente")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("ExamenLaboratorio")
                        .HasColumnType("int(11)");

                    b.Property<DateTime?>("FechaIngresoFichaClinica")
                        .HasColumnType("datetime");

                    b.Property<string>("Mascota")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Usuario")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.HasKey("IdFichaClinica")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ExamenLaboratorio" }, "fk_FichaClinica_ExamenLaboratorio1_idx");

                    b.HasIndex(new[] { "Mascota" }, "fk_FichaClinica_Paciente1_idx");

                    b.HasIndex(new[] { "Usuario" }, "fk_FichaClinica_Usuarios1_idx");

                    b.ToTable("fichaclinica");
                });

            modelBuilder.Entity("clinicaveterinariaBackEnd.Entities.Mascota", b =>
                {
                    b.Property<string>("IdPaciente")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("idPaciente");

                    b.Property<string>("Alergias")
                        .HasColumnType("text");

                    b.Property<string>("ClientePaciente")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("EspeciePaciente")
                        .HasColumnType("int(1)")
                        .HasColumnName("especiePaciente");

                    b.Property<string>("NombrePaciente")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("nombrePaciente");

                    b.Property<decimal?>("PesoPaciente")
                        .HasPrecision(2, 2)
                        .HasColumnType("decimal(2,2)")
                        .HasColumnName("pesoPaciente");

                    b.Property<string>("RazaPaciente")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<int?>("SexoPaciente")
                        .HasColumnType("int(1)")
                        .HasColumnName("sexoPaciente");

                    b.HasKey("IdPaciente")
                        .HasName("PRIMARY");

                    b.HasIndex("ClientePaciente");

                    b.HasIndex(new[] { "RazaPaciente" }, "fk_Paciente_raza1_idx");

                    b.HasIndex(new[] { "PesoPaciente" }, "pesoPaciente_UNIQUE")
                        .IsUnique();

                    b.HasIndex(new[] { "SexoPaciente" }, "sexoPaciente_UNIQUE")
                        .IsUnique();

                    b.ToTable("mascota");
                });

            modelBuilder.Entity("clinicaveterinariaBackEnd.Entities.Media", b =>
                {
                    b.Property<string>("IdMedia")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("idMedia");

                    b.Property<DateTime?>("FechaIngresoMedia")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaModificacionMedia")
                        .HasColumnType("datetime");

                    b.Property<string>("NombreMedia")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<string>("UrlMedia")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.HasKey("IdMedia")
                        .HasName("PRIMARY");

                    b.ToTable("media");
                });

            modelBuilder.Entity("clinicaveterinariaBackEnd.Entities.Producto", b =>
                {
                    b.Property<string>("IdProducto")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("idProducto");

                    b.Property<string>("Codigoventa")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("codigoventa");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.Property<string>("Empresa")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Nombre")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("nombre");

                    b.Property<decimal?>("Precio")
                        .HasPrecision(6, 4)
                        .HasColumnType("decimal(6,4)")
                        .HasColumnName("precio");

                    b.Property<decimal?>("Precioventa")
                        .HasPrecision(6, 4)
                        .HasColumnType("decimal(6,4)")
                        .HasColumnName("precioventa");

                    b.HasKey("IdProducto")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Empresa" }, "fk_Producto_Empresa1_idx");

                    b.ToTable("producto");
                });

            modelBuilder.Entity("clinicaveterinariaBackEnd.Entities.Raza", b =>
                {
                    b.Property<string>("IdRaza")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("idRaza");

                    b.Property<string>("DescripcionRaza")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("descripcionRaza");

                    b.Property<string>("NombreRaza")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("nombreRaza");

                    b.HasKey("IdRaza")
                        .HasName("PRIMARY");

                    b.ToTable("raza");
                });

            modelBuilder.Entity("clinicaveterinariaBackEnd.Entities.Telefono", b =>
                {
                    b.Property<string>("ClientesTelefonos")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("NumeroTelefono")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("numeroTelefono");

                    b.Property<int>("TipoTelefono")
                        .HasColumnType("int(1)")
                        .HasColumnName("tipoTelefono");

                    b.ToTable("telefono");
                });

            modelBuilder.Entity("clinicaveterinariaBackEnd.Entities.Usuario", b =>
                {
                    b.Property<string>("IdUsuario")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("idUsuario");

                    b.Property<string>("ApellidosUsuario")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("apellidosUsuario");

                    b.Property<int?>("CargoUsuario")
                        .HasColumnType("int(2)")
                        .HasColumnName("cargoUsuario");

                    b.Property<string>("CedulaUsuario")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("cedulaUsuario");

                    b.Property<string>("EmailUsuario")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("emailUsuario");

                    b.Property<string>("EmpresaUsuarios")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("NombresUsuario")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nombresUsuario");

                    b.Property<string>("Password")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("username");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("TelefonoUsuario")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("telefonoUsuario");

                    b.Property<string>("Username")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("username");

                    b.HasKey("IdUsuario")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "EmpresaUsuarios" }, "fk_Usuario_Empresa1_idx");

                    b.ToTable("usuarios");
                });

            modelBuilder.Entity("clinicaveterinariaBackEnd.Entities.Anamnesi", b =>
                {
                    b.HasOne("clinicaveterinariaBackEnd.Entities.Fichaclinica", "FichaClinicaNavigation")
                        .WithMany("Anamnesis")
                        .HasForeignKey("FichaClinica")
                        .HasConstraintName("fk_Anamnesis_FichaClinica1")
                        .IsRequired();

                    b.Navigation("FichaClinicaNavigation");
                });

            modelBuilder.Entity("clinicaveterinariaBackEnd.Entities.Cliente", b =>
                {
                    b.HasOne("clinicaveterinariaBackEnd.Entities.Empresa", "EmpresaClienteNavigation")
                        .WithMany("Clientes")
                        .HasForeignKey("EmpresaCliente")
                        .HasConstraintName("fk_Cliente_Empresa1")
                        .IsRequired();

                    b.Navigation("EmpresaClienteNavigation");
                });

            modelBuilder.Entity("clinicaveterinariaBackEnd.Entities.Empresa", b =>
                {
                    b.HasOne("clinicaveterinariaBackEnd.Entities.Media", "EmpresaMediaNavigation")
                        .WithMany("Empresas")
                        .HasForeignKey("EmpresaMedia")
                        .HasConstraintName("fk_Empresa_Media1")
                        .IsRequired();

                    b.Navigation("EmpresaMediaNavigation");
                });

            modelBuilder.Entity("clinicaveterinariaBackEnd.Entities.Fichaclinica", b =>
                {
                    b.HasOne("clinicaveterinariaBackEnd.Entities.Examenlaboratorio", "ExamenLaboratorioNavigation")
                        .WithMany("Fichaclinicas")
                        .HasForeignKey("ExamenLaboratorio")
                        .HasConstraintName("fk_FichaClinica_ExamenLaboratorio1")
                        .IsRequired();

                    b.HasOne("clinicaveterinariaBackEnd.Entities.Mascota", "MascotaNavigation")
                        .WithMany("Fichaclinicas")
                        .HasForeignKey("Mascota")
                        .HasConstraintName("fk_FichaClinica_Paciente1")
                        .IsRequired();

                    b.HasOne("clinicaveterinariaBackEnd.Entities.Usuario", "UsuarioNavigation")
                        .WithMany("Fichaclinicas")
                        .HasForeignKey("Usuario")
                        .HasConstraintName("fk_FichaClinica_Usuarios1")
                        .IsRequired();

                    b.Navigation("ExamenLaboratorioNavigation");

                    b.Navigation("MascotaNavigation");

                    b.Navigation("UsuarioNavigation");
                });

            modelBuilder.Entity("clinicaveterinariaBackEnd.Entities.Mascota", b =>
                {
                    b.HasOne("clinicaveterinariaBackEnd.Entities.Cliente", "Cliente")
                        .WithMany("Mascotas")
                        .HasForeignKey("ClientePaciente")
                        .HasConstraintName("fk_Mascota_Cliente")
                        .IsRequired();

                    b.HasOne("clinicaveterinariaBackEnd.Entities.Raza", "RazaPacienteNavigation")
                        .WithMany("Mascota")
                        .HasForeignKey("RazaPaciente")
                        .HasConstraintName("fk_Paciente_raza1")
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("RazaPacienteNavigation");
                });

            modelBuilder.Entity("clinicaveterinariaBackEnd.Entities.Producto", b =>
                {
                    b.HasOne("clinicaveterinariaBackEnd.Entities.Empresa", "EmpresaNavigation")
                        .WithMany("Productos")
                        .HasForeignKey("Empresa")
                        .HasConstraintName("fk_Producto_Empresa1")
                        .IsRequired();

                    b.Navigation("EmpresaNavigation");
                });

            modelBuilder.Entity("clinicaveterinariaBackEnd.Entities.Usuario", b =>
                {
                    b.HasOne("clinicaveterinariaBackEnd.Entities.Empresa", "EmpresaUsuariosNavigation")
                        .WithMany("Usuarios")
                        .HasForeignKey("EmpresaUsuarios")
                        .HasConstraintName("fk_Usuario_Empresa1")
                        .IsRequired();

                    b.Navigation("EmpresaUsuariosNavigation");
                });

            modelBuilder.Entity("clinicaveterinariaBackEnd.Entities.Cliente", b =>
                {
                    b.Navigation("Mascotas");
                });

            modelBuilder.Entity("clinicaveterinariaBackEnd.Entities.Empresa", b =>
                {
                    b.Navigation("Clientes");

                    b.Navigation("Productos");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("clinicaveterinariaBackEnd.Entities.Examenlaboratorio", b =>
                {
                    b.Navigation("Fichaclinicas");
                });

            modelBuilder.Entity("clinicaveterinariaBackEnd.Entities.Fichaclinica", b =>
                {
                    b.Navigation("Anamnesis");
                });

            modelBuilder.Entity("clinicaveterinariaBackEnd.Entities.Mascota", b =>
                {
                    b.Navigation("Fichaclinicas");
                });

            modelBuilder.Entity("clinicaveterinariaBackEnd.Entities.Media", b =>
                {
                    b.Navigation("Empresas");
                });

            modelBuilder.Entity("clinicaveterinariaBackEnd.Entities.Raza", b =>
                {
                    b.Navigation("Mascota");
                });

            modelBuilder.Entity("clinicaveterinariaBackEnd.Entities.Usuario", b =>
                {
                    b.Navigation("Fichaclinicas");
                });
#pragma warning restore 612, 618
        }
    }
}
